import com.github.spotbugs.SpotBugsTask

plugins {
    id 'java'

    // Test coverage
    id 'jacoco'

    // Code style
    id 'checkstyle'

    // PMD
    id 'pmd'

    // FindBugs / SpotBugs
    id "com.github.spotbugs" version "2.0.1"

    // Jacoco badge
    id "com.github.dawnwords.jacoco.badge" version "0.2.0"
}

group 'nl.tudelft.cse.sem.template'
version '1.0-SNAPSHOT'

sourceCompatibility = 11

repositories {
    mavenCentral()
    jcenter()
}

test {

    jacoco {
        enabled = true
    }

    // tests are always considered outdated, so gradle will run them every time
    // instead of returning "Test events were not received"
    outputs.upToDateWhen { false }
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

dependencies {
    testCompile('org.junit.jupiter:junit-jupiter:5.5.2')
    testImplementation('org.junit.jupiter:junit-jupiter:5.5.2')
    spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.7.1'
//    compile group: 'mysql', name: 'mysql-connector-java', version: '8.0.18'
    testCompile "org.mockito:mockito-core:1.+"
    integrationTestCompile('org.junit.jupiter:junit-jupiter:5.5.2')
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
}

tasks.withType(Test) {
    useJUnitPlatform()
}

check.dependsOn integrationTest
integrationTest.mustRunAfter test

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            element = 'CLASS'

            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.75
            }
        }
    }
}

jacocoBadgeGenSetting {
    jacocoReportPath  "$buildDir/reports/jacoco/test/jacocoTestReport.xml"
    readmePath "$projectDir/README.md"
    // since v0.2.0, percentage limitation (0-100) for different type of coverage
    limit = ['instruction': 0, 'branch': 0, 'line': 0, 'method': 0, 'class': 0]
}

checkstyle {
    toolVersion "8.25"
	configFile = rootProject.file('config/checkstyle/checkstyle.xml')
}

//pmd {
//    incrementalAnalysis = true
//}

spotbugs {
    sourceSets = [sourceSets.main]
    ignoreFailures = false
    effort = "default"
    reportLevel = "high"
    visitors = ["FindSqlInjection", "SwitchFallthrough"]
    excludeFilter = file("$rootProject.projectDir/config/spotbugs/excludeFilter.xml")
}

tasks.withType(SpotBugsTask) {
    reports.xml.enabled = false
    reports.html.enabled = true
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}
